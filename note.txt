
< What is and why React.js? >

1. A client-side JavaScript library
2. All about building modern, reactive user interfaces for the web

Mobile apps and desktop apps feel very reactive: Things happen instantly, you don't wait for new pages to load or actions to start.
-- Traditionally, in web apps, you click a link and wait for a new page to load. You click a button and wait for some action to complete.

3. Declarative, component-focused approach.


< Building Single-Page-Applications. (SPAs) >

React can be used to control parts of HTML pages or entire pages.
-- "Widget" approach on a multi-page-application. (Some)pages are still rendered on and served by a backend server.

React can also be used to control the entire frontend of a web application.
--"Single-Page-Application" (SPA) approach. Server only sends one HTML page. thereafter, React takes over and controls the UI.



< React Alternatives >

- React : Lean and focused component-based UI library. Certain features (e.g. routing) are added via community packages.
- Angular : Complete component-based UI framework, packed with features. Uses TypeScript. Can be overkill for smaller projects.
- Vue : Complete component-based UI framework. includes most core features. A bit less popular than React and Angular.





